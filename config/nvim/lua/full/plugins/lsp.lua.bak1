return {
	{
		"VonHeikemen/lsp-zero.nvim",
		branch = "v2.x",
		dependencies = {
			-- LSP Support
			{"neovim/nvim-lspconfig"},						-- Required
			{																			-- Optional
				"williamboman/mason.nvim",
				build = function()
					pcall(vim.cmd, "MasonUpdate")
				end,
			},
			{"williamboman/mason-lspconfig.nvim"}, -- Optional

			-- Autocompletion
			{ "hrsh7th/nvim-cmp" },		-- Required
			{ "hrsh7th/cmp-nvim-lsp" }, -- Required
			{							-- Reqired
				"L3MON4D3/LuaSnip",
				dependencies = { "rafamadriz/friendly-snippets" },
			},
			{ "lvimuser/lsp-inlayhints.nvim" },
			{ "simrat39/rust-tools.nvim" },
	
			config = function()
				local lsp = require("lsp-zero").preset({})

				lsp.on_attach(function(client, bufnr)
					lsp.default_keymaps({buffer = bufnr})
				end)

				local hints = require("lsp-inlayhints")
				local lspconfig = require("lspconfig")

				lspconfig.lua_ls.setup({
					on_attach = function(client, bufnr)
						hints.on_attach(client, bufnr)
					end,
					settings = {
						Lua = {
							hint = {
								enable = true,
							},
						},
					},
				})

				lspconfig.rust_analyzer.setup({
					on_attach = function(client, bufnr)
						hints.on_attach(client, bufnr)
					end,
					settings = {
						["rust-analyzer"] = {
								inlayHints = {
								enable = true,
							},
						},
					},
				})

				lspconfig.tsserver.setup({
					on_attach = function(client, bufnr)
						hints.on_attach(client, bufnr)
					end,
					settings = {
						typescript = {
							inlayHints = {
								includeInlayParameterNameHints = "all",
								includeInlayParameterNameHintsWhenArgumentMatchesName = false,
								includeInlayFunctionParameterTypeHints = true,
								includeInlayVariableTypeHints = true,
								includeInlayVariableTypeHintsWhenTypeMatchesName = false,
								includeInlayPropertyDeclarationTypeHints = true,
								includeInlayFunctionLikeReturnTypeHints = true,
								includeInlayEnumMemberValueHints = true,
							},
						},
					},
				})

				lsp.setup()

				local cmp = require("cmp")
				local cmp_action = require("lsp-zero").cmp_action()

				local select_ops = { behavior = cmp.SelectBehavior.Select }
				require("luasnip.loaders.from_vscode").lazy_load()

				local has_words_before = function()
					if vim.api.nvim_buf_get_option(0, "buftype") == "prompt" then return false end
					local line, col = unpack(vim.api.nvim_win_get_cursor(0))
					return col ~= 0 and vim.api.nvim_buf_get_text(0, line-1, 0, line-1, col, {})[1]:match("^%s*$") == nil
				end

				cmp.setup({
					sources = {
						{ name = "path" },
						{ name = "nvim_lsp" },
						{ name = "buffer", keyword_length = 3 },
						{ name = "luasnip", keyword_length = 2 },
					},
					mapping = {
						["<CR>"] = cmp.mapping.confirm({select=true}),
						["<C-l"] = cmp_action.luasnip_jump_forward(),
						["<C-h>"] = cmp_action.luasnip_jump_backward(),
						["<C-e>"] = cmp.mapping.abort(),
						["<C-j>"] = cmp.mapping.select_next_item(select_ops),
						["<C-k>"] = cmp.mapping.select_prev_item(select_ops),
						["<Down>"] = cmp.mapping.scroll_docs(4),
						["<Up>"] = cmp.mapping.scroll_docs(-4),
					},
					sorting = {
						priority_eight = 2,
						comparators = {
							-- Below is the default comparitor list and order for nvim-cmp
							cmp.config.compare.offset,
							-- cmp.config.compare.scopes, --this is commented in nvim-cmp too
							cmp.config.compare.exact,
							cmp.config.compare.score,
							cmp.config.compare.recently_used,
							cmp.config.compare.locality,
							cmp.config.compare.kind,
							cmp.config.compare.sort_text,
							cmp.config.compare.length,
							cmp.config.compare.order,
						},
					},
				})
			end,
		},
	},
	{
		"glepnir/lspsaga.nvim",
		lazy = false,
		event = "LspAttach",
		dependencies = {
			{"nvim-tree/nvim-web-devicons"},
			{"nvim-treesitter/nvim-treesitter"},
			{"VonHeikemen/lsp-zero.nvim"}, -- zero needs to be there
		},
		config = function()
			require("lspsaga").setup({
				finder = {
					keys = {
						expand_or_jump = "<CR>"
					},
				},
				outline = {
					keys = {
						expand_or_jump = "<CR>"
					},
				},
			})
			local wk = require("which-key")

			wk.register({
				g = {
					name = "+LSP",
					g = {"<cmd>Lspsaga lsp_finder<cr>", "lsp finder"},
					r = {"<cmd>Lspsaga rename<cr>", "Rename"},
					a = {"<cmd>Lspsaga code_action<cr>", "Code action"},
					p = {"<cmd>Lspsaga peek_definition<cr>", "Peek definition"},
					d = {"<cmd>Lspsaga goto_definition<cr>", "Goto definition"},
					o = {"<cmd>Lspsaga outline<cr>", "File Outline"}
				}
			}, {prefix="<leader>"})

		end,
	},
	{
		"lvimuser/lsp-inlayhints.nvim",
		config = function()
			require("lsp-inlayhints").setup({})
			vim.cmd("hi! LspInlayHint guifg=#403d52 guibg=#1f1d2e")
		end,
	},
}
